{"version":3,"sources":["services.js","actions/index.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/index.js","pages/Login.js","component/Header.js","component/Table.js","pages/Wallet.js","App.js","serviceWorker.js","index.js"],"names":["fetchApi","a","fetch","response","json","data","walletExpenses","expenses","type","payload","INITIAL_STATE","email","user","state","currencies","vixiDeuRuim","wallet","rootReducer","combineReducers","persistConfing","key","storage","whitelist","persistedReducer","persistReducer","store","createStore","composeWithDevTools","applyMiddleware","thunk","persistor","persistStore","Login","password","disabled","handleChange","bind","ativarButton","click","target","name","value","this","setState","includes","length","props","actionLogin","history","push","className","style","display","fontSize","marginRight","marginTop","data-testid","onChange","placeholder","onClick","React","Component","connect","dispatch","login","Header","expenseAmount","walletData","reduce","cotacao","expense","exchangeRates","currency","ask","toFixed","Table","removeToList","id","listExpenses","descriptionExpenses","deleteDispatch","NEW_ARRAY_EXPENSES","filter","newExpenses","console","log","map","description","index","tag","method","Number","split","backgroundColor","color","border","delet","Wallet","informationExpenses","moedas","htmlFor","moeda","fetchCota","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","loading","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e16c5546.chunk.js","sourcesContent":["const fetchApi = async () => {\n  const response = await fetch('https://economia.awesomeapi.com.br/json/all');\n  const data = await response.json();\n  return data;\n};\n\nexport default fetchApi;\n","// Coloque aqui suas actions\nimport fetchApi from '../services';\n\nexport const TYPE_LOGIN = 'TYPE_LOGIN';\nexport const TYPE_WALLET_CORRENCIES = 'TYPE_WALLET_CORRENCIES';\nexport const TYPE_WALLET_EXPENSES = 'TTYPE_WALLET_EXPENSES';\nexport const TYPE_ERROR = 'ERROR';\nexport const TYPE_DELETE_EXPENSE = 'DELETE_EXPENSE';\n\nexport const login = (email) => ({ type: TYPE_LOGIN, payload: email });\n\nconst deuRuim = () => ({ type: TYPE_ERROR });\n\nexport const walletCurrencies = (currencies) => ({\n  type: TYPE_WALLET_CORRENCIES,\n  payload: currencies,\n});\n\nconst walletExpenses = (expenses) => ({\n  type: TYPE_WALLET_EXPENSES,\n  payload: expenses,\n});\n\nexport const removeExpense = (newArray) => ({\n  type: TYPE_DELETE_EXPENSE,\n  payload: newArray,\n});\n\nexport const fetchCota = (expenses) => async (dispatch) => {\n  try {\n    const data = await fetchApi();\n    return dispatch(walletExpenses({\n      ...expenses, exchangeRates: data,\n    }));\n  } catch (error) {\n    dispatch(deuRuim());\n  }\n};\n","// Esse reducer será responsável por tratar as informações da pessoa usuária\nimport { TYPE_LOGIN } from '../actions';\n\nconst INITIAL_STATE = {\n  email: '',\n};\n\nconst user = (state = INITIAL_STATE, { type, payload }) => {\n  switch (type) {\n  case TYPE_LOGIN:\n    return {\n      ...state,\n      email: payload,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default user;\n","// Esse reducer será responsável por tratar o todas as informações relacionadas as despesas\nimport {\n  TYPE_DELETE_EXPENSE, TYPE_ERROR,\n  TYPE_WALLET_CORRENCIES, TYPE_WALLET_EXPENSES } from '../actions';\n\nconst INITIAL_STATE = {\n  currencies: ['USD', 'CAD', 'EUR', 'GBP',\n    'ARS', 'BTC', 'LTC', 'JPY', 'CHF', 'AUD', 'CNY', 'ILS', 'ETH', 'XRP'],\n  expenses: [],\n  vixiDeuRuim: '',\n};\n\nconst wallet = (state = INITIAL_STATE, { type, payload }) => {\n  switch (type) {\n  case TYPE_WALLET_CORRENCIES:\n    return {\n      ...state, currencies: payload,\n    };\n  case TYPE_WALLET_EXPENSES:\n    return {\n      ...state, expenses: [...state.expenses, payload],\n    };\n\n  case TYPE_DELETE_EXPENSE:\n    return {\n      ...state, expenses: payload,\n    };\n\n  case TYPE_ERROR:\n    return {\n      ...state, vixiDeuRuim: 'Deu ruim na api',\n    };\n  default:\n    return state;\n  }\n};\n\nexport default wallet;\n","// import user from './user';\n// import wallet from './wallet';\n\n// Configure os seus reducers.\n// ATENÇÃO: você obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\nimport { combineReducers } from 'redux';\n\nimport user from './user';\nimport wallet from './wallet';\n\nconst rootReducer = combineReducers({\n  user,\n  wallet,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst persistConfing = {\n  key: 'trybe-wallet',\n  storage,\n  whitelist: ['user'],\n};\n\nconst persistedReducer = persistReducer(persistConfing, rootReducer);\n\nexport const store = createStore(persistedReducer,\n  composeWithDevTools(applyMiddleware(thunk)));\nexport const persistor = persistStore(store);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { FaCommentDollar } from 'react-icons/fa';\nimport { login } from '../actions';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      email: '',\n      password: '',\n      disabled: true,\n\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.ativarButton = this.ativarButton.bind(this);\n    this.click = this.click.bind(this);\n  }\n\n  handleChange({ target: { name, value } }) {\n    this.setState({\n      [name]: value,\n    }, this.ativarButton);\n  }\n\n  ativarButton() {\n    const MIN_CHAR = 6;\n    const { email, password } = this.state;\n\n    const VALIDATE_BUTTON = email.includes('@')\n    && email.includes('.com')\n    && password.length >= (MIN_CHAR);\n\n    if (VALIDATE_BUTTON) {\n      this.setState({ disabled: false });\n    } else {\n      this.setState({ disabled: true });\n    }\n  }\n\n  click() {\n    const { actionLogin, history } = this.props;\n    const { email } = this.state;\n    actionLogin(email);\n    history.push('/carteira');\n  }\n\n  render() {\n    const { email, disabled, password } = this.state;\n    return (\n      <form className=\"form\">\n        <div className=\"title-login\">\n          <div style={ { display: 'flex' } }>\n            <h1 style={ { fontSize: '50px' } }> Trybe wallet  </h1>\n            <FaCommentDollar style={ { fontSize: '30px' } } />\n          </div>\n          <h1 style={ { fontSize: '54px', marginRight: '30px', marginTop: '100px' } }>\n            Faça seu login\n            <br />\n            na carteira\n          </h1>\n        </div>\n        <div className=\"login-inputs\">\n          <div className=\"login-content\">\n            <FaCommentDollar className=\"svg\" />\n            <input\n              className=\"input-name\"\n              name=\"email\"\n              data-testid=\"email-input\"\n              onChange={ this.handleChange }\n              type=\"email\"\n              placeholder=\"Email\"\n              value={ email }\n            />\n\n            <input\n              className=\"input-name\"\n              name=\"password\"\n              data-testid=\"password-input\"\n              type=\"password\"\n              value={ password }\n              placeholder=\"Senha \"\n              onChange={ this.handleChange }\n            />\n            <button\n              className=\"bnt\"\n              disabled={ disabled }\n              type=\"button\"\n              onClick={ this.click }\n            >\n              Entrar\n\n            </button>\n          </div>\n        </div>\n      </form>);\n  }\n}\nLogin.propTypes = {\n  actionLogin: PropTypes.func.isRequired,\n  history: PropTypes.shape({ push: PropTypes.func }).isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  actionLogin: (email) => dispatch(login(email)),\n});\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { FaCommentDollar } from 'react-icons/fa';\n\nclass Header extends Component {\n  render() {\n    const { user, walletData } = this.props;\n    const expenseAmount = walletData.reduce((cotacao, expense) => cotacao\n      + (expense.exchangeRates[expense.currency].ask * expense.value), 0);\n\n    return (\n      <header className=\"component-header\">\n        <div className=\"title\">\n          <h1> Trybe wallet </h1>\n          <FaCommentDollar className=\"svg-header\" />\n        </div>\n\n        <h2 className=\"email\" data-testid=\"email-field\">\n          {`Olá, ${user}`}\n        </h2>\n        <div className=\"total-field\">\n          <h3 data-testid=\"total-field\">\n            {` Dispesa Total : ${expenseAmount.toFixed(2)}`}\n          </h3>\n\n          <h3 data-testid=\"header-currency-field\">BRL</h3>\n        </div>\n      </header>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  const { user: { email } } = state;\n  const { wallet: { expenses } } = state;\n  return {\n    user: email,\n    walletData: expenses,\n\n  };\n};\n\nHeader.propTypes = {\n  user: PropTypes.string.isRequired,\n  walletData: PropTypes.arrayOf(PropTypes.shape({}).isRequired).isRequired,\n};\n\nexport default connect(mapStateToProps)(Header);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { HiOutlineTrash } from 'react-icons/hi';\nimport { removeExpense } from '../actions';\n\nclass Table extends Component {\nremoveToList = (id) => {\n  const { descriptionExpenses: listExpenses, deleteDispatch } = this.props;\n  const NEW_ARRAY_EXPENSES = listExpenses.filter((newExpenses) => newExpenses.id\n  !== id);\n  console.log(NEW_ARRAY_EXPENSES);\n  deleteDispatch(NEW_ARRAY_EXPENSES);\n}\n\nrender() {\n  const TABELA = ['Descrição', 'Tag', 'Moeda', 'Método de pagamento',\n    'Valor', 'Câmbio utilizado',\n    'Valor convertido', 'Moeda de conversão', 'Excluir'];\n  const { descriptionExpenses } = this.props;\n  return (\n    <table>\n      <thead>\n        <tr className=\"table-descripition\">\n          {\n            TABELA.map((description, index) => (\n\n              <th key={ index }>{description}</th>\n\n            ))\n          }\n        </tr>\n      </thead>\n      <tbody>\n        { descriptionExpenses.map((expenses) => (\n          <tr className=\"expenses\" key={ expenses.id } id={ expenses.id }>\n            <td>{expenses.description}</td>\n            <td>{expenses.tag}</td>\n            <td>{expenses.currency}</td>\n            <td>{expenses.method}</td>\n            <td>{Number(expenses.value).toFixed(2)}</td>\n            <td>{(expenses.exchangeRates[expenses.currency].name.split('/')[0])}</td>\n            <td>{Number(expenses.exchangeRates[expenses.currency].ask).toFixed(2)}</td>\n            <td>\n              {Number(expenses.exchangeRates[expenses.currency].ask\n                  * expenses.value).toFixed(2)}\n            </td>\n            <td>Real</td>\n            <td>\n              <button\n                style={ { backgroundColor: 'red', color: 'white', border: 'none' } }\n                type=\"button\"\n                data-testid=\"delete-btn\"\n                onClick={ () => this.removeToList(expenses.id) }\n              >\n                <HiOutlineTrash />\n              </button>\n\n            </td>\n          </tr>\n        )) }\n      </tbody>\n    </table>);\n}\n}\n\nconst mapStateToProps = (state) => {\n  const { wallet: { expenses } } = state;\n  return {\n    descriptionExpenses: expenses,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  deleteDispatch: (delet) => dispatch(removeExpense(delet)),\n});\n\nTable.propTypes = {\n  descriptionExpenses: PropTypes.arrayOf(PropTypes.shape({}).isRequired).isRequired,\n  deleteDispatch: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { fetchCota } from '../actions';\nimport Header from '../component/Header';\nimport fetchApi from '../services';\nimport Table from '../component/Table';\n\nclass Wallet extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      id: 0,\n      value: '',\n      description: '',\n      currency: 'USD',\n      method: 'Cartão de crédito',\n      tag: 'Alimentação',\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.click = this.click.bind(this);\n  }\n\n  componentDidMount() {\n    fetchApi();\n  }\n\n  handleChange({ target: { name, value } }) {\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  click() {\n    const { informationExpenses } = this.props;\n    const information = this.state;\n    informationExpenses(information);\n    this.setState((state) => ({\n      id: state.id + 1,\n      value: 0,\n      description: '',\n    }));\n  }\n\n  render() {\n    const { moedas } = this.props;\n    const { value, description, currency, method, tag } = this.state;\n    return (\n      <>\n        <Header />\n        <form>\n          <label htmlFor=\"value\">\n            valor\n            <input\n              name=\"value\"\n              className=\"inputs\"\n              id=\"value\"\n              data-testid=\"value-input\"\n              value={ value }\n              onChange={ this.handleChange }\n            />\n          </label>\n\n          <label htmlFor=\"description\">\n            descrição\n            <input\n              name=\"description\"\n              className=\"inputs\"\n              type=\"text\"\n              id=\"description\"\n              data-testid=\"description-input\"\n              value={ description }\n              onChange={ this.handleChange }\n            />\n          </label>\n\n          <label htmlFor=\"currency\">\n            Moeda\n            <select\n              name=\"currency\"\n              className=\"inputs\"\n              id=\"currency\"\n              data-testid=\"currency-input\"\n              value={ currency }\n              onChange={ this.handleChange }\n            >\n              {moedas.map((moeda) => (\n                <option key={ moeda }>{moeda}</option>\n              ))}\n            </select>\n          </label>\n          <label htmlFor=\"method\">\n            Metodo de pagamento\n            <select\n              className=\"inputs\"\n              id=\"method\"\n              data-testid=\"method-input\"\n              name=\"method\"\n              value={ method }\n              onChange={ this.handleChange }\n            >\n              <option>Dinheiro</option>\n              <option>Cartão de crédito</option>\n              <option>Cartão de débito</option>\n            </select>\n          </label>\n          <label htmlFor=\"tag\">\n            tag\n            <select\n              className=\"inputs\"\n              name=\"tag\"\n              id=\"tag\"\n              data-testid=\"tag-input\"\n              value={ tag }\n              onChange={ this.handleChange }\n            >\n              <option>Alimentação</option>\n              <option>Lazer</option>\n              <option>Trabalho</option>\n              <option>Transporte</option>\n              <option>Saúde</option>\n            </select>\n          </label>\n          <button className=\"bnt-wallet\" onClick={ this.click } type=\"button\">\n            Adicionar despesa\n          </button>\n        </form>\n        <Table />\n      </>\n    );\n  }\n}\nconst mapStateToProps = (state) => {\n  const { wallet: { currencies } } = state;\n  return {\n    moedas: currencies,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  informationExpenses: (expenses) => dispatch(fetchCota(expenses)),\n});\n\nWallet.propTypes = {\n  informationExpenses: PropTypes.func.isRequired,\n  moedas: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Wallet);\n","import React, { Component } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\n\nimport './App.css';\n\nclass App extends Component {\n//  obrigado por mais um projeto maravilhoso trybe\n  render() {\n    return (\n\n      <Switch>\n        <Route exact path=\"/carteira\" component={ Wallet } />\n        <Route exact path=\"/\" component={ Login } />\n      </Switch>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { store, persistor } from './store';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <HashRouter>\n    <Provider store={ store }>\n      <PersistGate loading={ null } persistor={ persistor }>\n        <App />\n      </PersistGate>\n    </Provider>\n  </HashRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}